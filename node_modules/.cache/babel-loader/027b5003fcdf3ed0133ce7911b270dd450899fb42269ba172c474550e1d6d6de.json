{"ast":null,"code":"import { isUndef } from \"./TypeCheck.js\";\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value, gte) {\n  let lte = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Warn if the context is not running.\n */\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn('The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.');\n  }\n}\n/**\n * If it is currently inside a scheduled callback\n */\nlet isInsideScheduledCallback = false;\nlet printedScheduledWarning = false;\n/**\n * Notify that the following block of code is occurring inside a Transport callback.\n */\nexport function enterScheduledCallback(insideCallback) {\n  isInsideScheduledCallback = insideCallback;\n}\n/**\n * Make sure that a time was passed into\n */\nexport function assertUsedScheduleTime(time) {\n  if (isUndef(time) && isInsideScheduledCallback && !printedScheduledWarning) {\n    printedScheduledWarning = true;\n    warn(\"Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing\");\n  }\n}\n/**\n * The default logger is the console\n */\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\nexport function log() {\n  defaultLogger.log(...arguments);\n}\n/**\n * Warn anything\n */\nexport function warn() {\n  defaultLogger.warn(...arguments);\n}","map":{"version":3,"names":["isUndef","assert","statement","error","Error","assertRange","value","gte","lte","arguments","length","undefined","Infinity","RangeError","assertContextRunning","context","isOffline","state","warn","isInsideScheduledCallback","printedScheduledWarning","enterScheduledCallback","insideCallback","assertUsedScheduleTime","time","defaultLogger","console","setLogger","logger","log"],"sources":["/Users/ayakos/Documents/GitHub/TapSound/node_modules/tone/Tone/core/util/Debug.ts"],"sourcesContent":["import { isUndef } from \"./TypeCheck.js\";\nimport type { BaseContext } from \"../context/BaseContext.js\";\nimport type { Time } from \"../type/Units.js\";\n\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): asserts statement {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(\n\t\t\t`Value must be within [${gte}, ${lte}], got: ${value}`\n\t\t);\n\t}\n}\n\n/**\n * Warn if the context is not running.\n */\nexport function assertContextRunning(context: BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\n\t\t\t'The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.'\n\t\t);\n\t}\n}\n\n/**\n * If it is currently inside a scheduled callback\n */\nlet isInsideScheduledCallback = false;\nlet printedScheduledWarning = false;\n\n/**\n * Notify that the following block of code is occurring inside a Transport callback.\n */\nexport function enterScheduledCallback(insideCallback: boolean): void {\n\tisInsideScheduledCallback = insideCallback;\n}\n\n/**\n * Make sure that a time was passed into\n */\nexport function assertUsedScheduleTime(time?: Time): void {\n\tif (\n\t\tisUndef(time) &&\n\t\tisInsideScheduledCallback &&\n\t\t!printedScheduledWarning\n\t) {\n\t\tprintedScheduledWarning = true;\n\t\twarn(\n\t\t\t\"Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing\"\n\t\t);\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,gBAAgB;AAIxC;;;;;AAKA,OAAM,SAAUC,MAAMA,CAACC,SAAkB,EAAEC,KAAa;EACvD,IAAI,CAACD,SAAS,EAAE;IACf,MAAM,IAAIE,KAAK,CAACD,KAAK,CAAC;EACvB;AACD;AAEA;;;AAGA,OAAM,SAAUE,WAAWA,CAACC,KAAa,EAAEC,GAAW,EAAgB;EAAA,IAAdC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,QAAQ;EACrE,IAAI,EAAEL,GAAG,IAAID,KAAK,IAAIA,KAAK,IAAIE,GAAG,CAAC,EAAE;IACpC,MAAM,IAAIK,UAAU,CACnB,yBAAyBN,GAAG,KAAKC,GAAG,WAAWF,KAAK,EAAE,CACtD;EACF;AACD;AAEA;;;AAGA,OAAM,SAAUQ,oBAAoBA,CAACC,OAAoB;EACxD;EACA,IAAI,CAACA,OAAO,CAACC,SAAS,IAAID,OAAO,CAACE,KAAK,KAAK,SAAS,EAAE;IACtDC,IAAI,CACH,6FAA6F,CAC7F;EACF;AACD;AAEA;;;AAGA,IAAIC,yBAAyB,GAAG,KAAK;AACrC,IAAIC,uBAAuB,GAAG,KAAK;AAEnC;;;AAGA,OAAM,SAAUC,sBAAsBA,CAACC,cAAuB;EAC7DH,yBAAyB,GAAGG,cAAc;AAC3C;AAEA;;;AAGA,OAAM,SAAUC,sBAAsBA,CAACC,IAAW;EACjD,IACCxB,OAAO,CAACwB,IAAI,CAAC,IACbL,yBAAyB,IACzB,CAACC,uBAAuB,EACvB;IACDA,uBAAuB,GAAG,IAAI;IAC9BF,IAAI,CACH,qJAAqJ,CACrJ;EACF;AACD;AAUA;;;AAGA,IAAIO,aAAa,GAAWC,OAAO;AAEnC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,MAAc;EACvCH,aAAa,GAAGG,MAAM;AACvB;AAEA;;;AAGA,OAAM,SAAUC,GAAGA,CAAA,EAAe;EACjCJ,aAAa,CAACI,GAAG,CAAC,GAAApB,SAAO,CAAC;AAC3B;AAEA;;;AAGA,OAAM,SAAUS,IAAIA,CAAA,EAAe;EAClCO,aAAa,CAACP,IAAI,CAAC,GAAAT,SAAO,CAAC;AAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}